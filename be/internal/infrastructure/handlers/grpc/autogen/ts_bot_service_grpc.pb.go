// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: ts_bot_service.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerraSenseBotServiceClient is the client API for TerraSenseBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerraSenseBotServiceClient interface {
	PairSensor(ctx context.Context, in *PairingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PairedSensors(ctx context.Context, in *PairedSensorsRequest, opts ...grpc.CallOption) (*PairedSensorsResponse, error)
	GetLatestMeasurement(ctx context.Context, in *LatestMeasurementSearch, opts ...grpc.CallOption) (*Measurement, error)
}

type terraSenseBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraSenseBotServiceClient(cc grpc.ClientConnInterface) TerraSenseBotServiceClient {
	return &terraSenseBotServiceClient{cc}
}

func (c *terraSenseBotServiceClient) PairSensor(ctx context.Context, in *PairingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc_pb.TerraSenseBotService/PairSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraSenseBotServiceClient) PairedSensors(ctx context.Context, in *PairedSensorsRequest, opts ...grpc.CallOption) (*PairedSensorsResponse, error) {
	out := new(PairedSensorsResponse)
	err := c.cc.Invoke(ctx, "/grpc_pb.TerraSenseBotService/PairedSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraSenseBotServiceClient) GetLatestMeasurement(ctx context.Context, in *LatestMeasurementSearch, opts ...grpc.CallOption) (*Measurement, error) {
	out := new(Measurement)
	err := c.cc.Invoke(ctx, "/grpc_pb.TerraSenseBotService/GetLatestMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerraSenseBotServiceServer is the server API for TerraSenseBotService service.
// All implementations must embed UnimplementedTerraSenseBotServiceServer
// for forward compatibility
type TerraSenseBotServiceServer interface {
	PairSensor(context.Context, *PairingRequest) (*emptypb.Empty, error)
	PairedSensors(context.Context, *PairedSensorsRequest) (*PairedSensorsResponse, error)
	GetLatestMeasurement(context.Context, *LatestMeasurementSearch) (*Measurement, error)
	mustEmbedUnimplementedTerraSenseBotServiceServer()
}

// UnimplementedTerraSenseBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTerraSenseBotServiceServer struct {
}

func (UnimplementedTerraSenseBotServiceServer) PairSensor(context.Context, *PairingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PairSensor not implemented")
}
func (UnimplementedTerraSenseBotServiceServer) PairedSensors(context.Context, *PairedSensorsRequest) (*PairedSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PairedSensors not implemented")
}
func (UnimplementedTerraSenseBotServiceServer) GetLatestMeasurement(context.Context, *LatestMeasurementSearch) (*Measurement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMeasurement not implemented")
}
func (UnimplementedTerraSenseBotServiceServer) mustEmbedUnimplementedTerraSenseBotServiceServer() {}

// UnsafeTerraSenseBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerraSenseBotServiceServer will
// result in compilation errors.
type UnsafeTerraSenseBotServiceServer interface {
	mustEmbedUnimplementedTerraSenseBotServiceServer()
}

func RegisterTerraSenseBotServiceServer(s grpc.ServiceRegistrar, srv TerraSenseBotServiceServer) {
	s.RegisterService(&TerraSenseBotService_ServiceDesc, srv)
}

func _TerraSenseBotService_PairSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraSenseBotServiceServer).PairSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_pb.TerraSenseBotService/PairSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraSenseBotServiceServer).PairSensor(ctx, req.(*PairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraSenseBotService_PairedSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairedSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraSenseBotServiceServer).PairedSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_pb.TerraSenseBotService/PairedSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraSenseBotServiceServer).PairedSensors(ctx, req.(*PairedSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraSenseBotService_GetLatestMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestMeasurementSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraSenseBotServiceServer).GetLatestMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_pb.TerraSenseBotService/GetLatestMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraSenseBotServiceServer).GetLatestMeasurement(ctx, req.(*LatestMeasurementSearch))
	}
	return interceptor(ctx, in, info, handler)
}

// TerraSenseBotService_ServiceDesc is the grpc.ServiceDesc for TerraSenseBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerraSenseBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_pb.TerraSenseBotService",
	HandlerType: (*TerraSenseBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PairSensor",
			Handler:    _TerraSenseBotService_PairSensor_Handler,
		},
		{
			MethodName: "PairedSensors",
			Handler:    _TerraSenseBotService_PairedSensors_Handler,
		},
		{
			MethodName: "GetLatestMeasurement",
			Handler:    _TerraSenseBotService_GetLatestMeasurement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ts_bot_service.proto",
}
