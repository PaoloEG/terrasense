// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: ts_service.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerraSenseServiceClient is the client API for TerraSenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerraSenseServiceClient interface {
	GetLatestMeasurement(ctx context.Context, in *LatestMeasurementSearch, opts ...grpc.CallOption) (*Measurement, error)
	GetMeasurements(ctx context.Context, in *MeasurementSearch, opts ...grpc.CallOption) (*Measurements, error)
}

type terraSenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraSenseServiceClient(cc grpc.ClientConnInterface) TerraSenseServiceClient {
	return &terraSenseServiceClient{cc}
}

func (c *terraSenseServiceClient) GetLatestMeasurement(ctx context.Context, in *LatestMeasurementSearch, opts ...grpc.CallOption) (*Measurement, error) {
	out := new(Measurement)
	err := c.cc.Invoke(ctx, "/grpc_pb.TerraSenseService/GetLatestMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraSenseServiceClient) GetMeasurements(ctx context.Context, in *MeasurementSearch, opts ...grpc.CallOption) (*Measurements, error) {
	out := new(Measurements)
	err := c.cc.Invoke(ctx, "/grpc_pb.TerraSenseService/GetMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerraSenseServiceServer is the server API for TerraSenseService service.
// All implementations must embed UnimplementedTerraSenseServiceServer
// for forward compatibility
type TerraSenseServiceServer interface {
	GetLatestMeasurement(context.Context, *LatestMeasurementSearch) (*Measurement, error)
	GetMeasurements(context.Context, *MeasurementSearch) (*Measurements, error)
	mustEmbedUnimplementedTerraSenseServiceServer()
}

// UnimplementedTerraSenseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTerraSenseServiceServer struct {
}

func (UnimplementedTerraSenseServiceServer) GetLatestMeasurement(context.Context, *LatestMeasurementSearch) (*Measurement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMeasurement not implemented")
}
func (UnimplementedTerraSenseServiceServer) GetMeasurements(context.Context, *MeasurementSearch) (*Measurements, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (UnimplementedTerraSenseServiceServer) mustEmbedUnimplementedTerraSenseServiceServer() {}

// UnsafeTerraSenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerraSenseServiceServer will
// result in compilation errors.
type UnsafeTerraSenseServiceServer interface {
	mustEmbedUnimplementedTerraSenseServiceServer()
}

func RegisterTerraSenseServiceServer(s grpc.ServiceRegistrar, srv TerraSenseServiceServer) {
	s.RegisterService(&TerraSenseService_ServiceDesc, srv)
}

func _TerraSenseService_GetLatestMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestMeasurementSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraSenseServiceServer).GetLatestMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_pb.TerraSenseService/GetLatestMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraSenseServiceServer).GetLatestMeasurement(ctx, req.(*LatestMeasurementSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraSenseService_GetMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasurementSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraSenseServiceServer).GetMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_pb.TerraSenseService/GetMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraSenseServiceServer).GetMeasurements(ctx, req.(*MeasurementSearch))
	}
	return interceptor(ctx, in, info, handler)
}

// TerraSenseService_ServiceDesc is the grpc.ServiceDesc for TerraSenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerraSenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_pb.TerraSenseService",
	HandlerType: (*TerraSenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestMeasurement",
			Handler:    _TerraSenseService_GetLatestMeasurement_Handler,
		},
		{
			MethodName: "GetMeasurements",
			Handler:    _TerraSenseService_GetMeasurements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ts_service.proto",
}
